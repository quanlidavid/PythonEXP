# 1#######################################################################################
#
# with as
# 这个语法是用来代替传统的try...finally语法的。
# with EXPRESSION [ as VARIABLE] WITH-BLOCK
# 基本思想是with所求值的对象必须有一个__enter__()方法，一个__exit__()方法。
# 紧跟with后面的语句被求值后，返回对象的__enter__()方法被调用，这个方法的返回值将被赋值给as后面的变量。当with后面的代码块全部被执行完之后，将调用前面返回对象的__exit__()方法。
#
file = open("/etc/hosts")
try:
    data = file.read()
finally:
    file.close()

# 使用with...as...的方式替换，

with open("/etc/hosts") as file:
    data = file.read()
    print(data)

# 2#######################################################################################
# Assert that something is true.
# 用来让程序测试这个condition，如果condition为false，那么raise一个AssertionError出来带上后面的字符串信息作为异常参数
# assert False, "Error!"
# assert 1==2, "2 不等于 1"

# 3#######################################################################################
# 由于python都是引用，而python有GC机制，所以，del语句作用在变量上，而不是数据对象上。
a = 1  # 对象 1 被 变量a引用，对象1的引用计数器为1
b = a  # 对象1 被变量b引用，对象1的引用计数器加1
c = a  # 1对象1 被变量c引用，对象1的引用计数器加1
del a  # 删除变量a，解除a对1的引用
del b  # 删除变量b，解除b对1的引用
print(c)  # 最终变量c仍然引用1

li = [1, 2, 3, 4, 5]  # 列表本身不包含数据1,2,3,4,5，而是包含变量：li[0] li[1] li[2] li[3] li[4]
first = li[0]  # 拷贝列表，也不会有数据对象的复制，而是创建新的变量引用
del li[0]
print(li)  # 输出[2, 3, 4, 5]
print(first)  # 输出 1

# 4#######################################################################################
# 与Python异常相关的关键字：
# 关键字          关键字说明
# raise           抛出/引发异常
# try/except      捕获异常并处理
# pass            忽略异常
# as              定义异常实例(except IOError as e)
# finally         无论是否出现异常，都执行的代码
# else            如果try中的语句没有引发异常，则执行else中的语句

# 常用异常名：
# 异常名    描述
# AttributeError 调用不存在的方法引发的异常
# EOFError     遇到文件末尾引发的异常
# ImportError 导入模块出错引发的异常
# IndexError     列表越界引发的异常
# IOError     I/O操作引发的异常，如打开文件出错等
# KeyError   使用字典中不存在的关键字引发的异常
# NameError 使用不存在的变量名引发的异常
# TabError 语句块缩进不正确引发的异常
# ValueError 搜索列表中不存在的值引发的异常
# ZeroDivisionError   除数为零引发的异常
try:
    f = open("file-not-exists", "r")
except IOError as e:
    print("open exception: %s: %s\n" % (e.errno, e.strerror))

# 5#######################################################################################
# exec Run a string as Python.
exec("print('hello')")
x = 10
y = 20
a = eval("x+y")
print("a:", a)
b = eval("x+y", {"x": 1, "y": 2})  # 传参数，参数可以写成字典(dict)形式
print("b:", b)
c = eval("x+y", {"x": 1, "y": 2}, {"y": 3, "z": 4})
print("c:", c)
d = eval("print(x,y)")
print("d:", d)  # 对于变量d，因为print()函数不是一个计算表达式，因此没有返回值

# Data Types#######################################################################################
# Represents “nothing” or “no value.”
x = None
print("x:", x)

# Stores bytes, maybe of text, PNG, file, etc.
x = b"hello"
print("x:", x)

# Stores a list of things.
x = [1, 2, 3, 4]
print("x:", x)

# Stores a key=value mapping of things.
x = {'a': 1, 'b': 2}
print("x:", x)

# Power of
print(2 ** 4)

# Floor division
print(2 // 4)

# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
# 5#######################################################################################
